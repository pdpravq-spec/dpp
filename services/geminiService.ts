
import { GoogleGenAI, Modality } from "@google/genai";
import { MODEL_IMAGE_EDIT } from '../constants';
import type { AspectRatio } from '../types';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: API_KEY });

const getBase64AndMimeType = (dataUrl: string) => {
    const match = dataUrl.match(/^data:(image\/\w+);base64,(.*)$/);
    if (!match) throw new Error('Invalid data URL');
    return { mimeType: match[1], base64: match[2] };
};

export const getConceptSuggestion = async (images: { base64: string, mimeType: string }[]): Promise<string> => {
    const textPart = {
        text: 'Analyze these images of a product. Based on them, suggest a creative, professional, and eye-catching concept for a promotional poster. The suggestion should be a detailed description of about 100-150 characters, ready to be used as a prompt.',
    };
    const imageParts = images.map(img => ({
        inlineData: {
            data: img.base64,
            mimeType: img.mimeType,
        },
    }));

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: [textPart, ...imageParts] },
    });

    return response.text;
};

const callGeminiImageModel = async (prompt: string, image: {base64: string, mimeType: string}, aspectRatio: AspectRatio): Promise<string> => {
    const response = await ai.models.generateContent({
        model: MODEL_IMAGE_EDIT,
        contents: {
            parts: [
                {
                    inlineData: {
                        data: image.base64,
                        mimeType: image.mimeType,
                    },
                },
                {
                    text: `${prompt}. The final image should have an aspect ratio of ${aspectRatio}.`,
                },
            ],
        },
        config: {
            responseModalities: [Modality.IMAGE, Modality.TEXT],
        },
    });

    for (const part of response.candidates?.[0]?.content?.parts ?? []) {
        if (part.inlineData) {
            return part.inlineData.data;
        }
    }
    
    throw new Error('No image was generated by the AI.');
}

export const removeBackground = async (base64Image: string, mimeType: string): Promise<string> => {
    const prompt = 'Remove the background completely, leaving only the main product on a transparent background. Do not alter the product itself.';
    return callGeminiImageModel(prompt, { base64: base64Image, mimeType }, '1:1'); // Ratio doesn't matter for bg removal
};

export const createPoster = async (bgRemovedDataUrl: string, concept: string, aspectRatio: AspectRatio): Promise<string> => {
    const { base64, mimeType } = getBase64AndMimeType(bgRemovedDataUrl);
    const prompt = `Using the provided product image (which has a transparent background), create a professional and eye-catching poster. The creative concept for the poster is: "${concept}". Place the product prominently and naturally within the scene.`;
    return callGeminiImageModel(prompt, { base64, mimeType }, aspectRatio);
};

export const refinePoster = async (currentPosterDataUrl: string, refinement: string, aspectRatio: AspectRatio): Promise<string> => {
    const { base64, mimeType } = getBase64AndMimeType(currentPosterDataUrl);
    const prompt = `Refine the provided poster based on this instruction: "${refinement}".`;
    return callGeminiImageModel(prompt, { base64, mimeType }, aspectRatio);
};
